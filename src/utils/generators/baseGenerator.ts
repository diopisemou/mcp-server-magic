import { ServerConfig, GenerationResult, ServerFile } from '@/types';
import { ExtendedServerConfig } from '@/types/serverConfig';

/**
 * Interface for all server generators
 */
export interface IServerGenerator {
  /**
   * Generate server files based on the configuration
   * @param config Server configuration
   * @returns Result of the generation process
   */
  generateServer(config: ExtendedServerConfig): GenerationResult;
  
  /**
   * Validate the server configuration
   * @param config Server configuration to validate
   * @returns True if the configuration is valid, false otherwise
   */
  validateConfig(config: ExtendedServerConfig): boolean;
  
  /**
   * Get a list of features supported by this generator
   * @returns Array of supported feature strings
   */
  getSupportedFeatures(): string[];
}

/**
 * Abstract base class for server generators
 * Implements common functionality shared across different generators
 */
export abstract class BaseGenerator implements IServerGenerator {
  /**
   * Abstract method to generate server files
   * Must be implemented by all concrete generator classes
   */
  abstract generateServer(config: ExtendedServerConfig): GenerationResult;
  
  /**
   * Validate server configuration
   * @param config Server configuration to validate
   * @returns True if the configuration is valid, false otherwise
   */
  validateConfig(config: ExtendedServerConfig): boolean {
    // Basic validation that all generators should perform
    if (!config.name || config.name.trim() === '') {
      return false;
    }
    
    if (!config.language) {
      return false;
    }
    
    if (!config.endpoints || config.endpoints.length === 0) {
      return false;
    }
    
    return true;
  }
  
  /**
   * Get a list of features supported by this generator
   * @returns Array of supported feature strings
   */
  getSupportedFeatures(): string[] {
    return ['basic-authentication', 'resource-endpoints', 'tool-endpoints'];
  }
  
  /**
   * Generate a README.md file for the server
   * @param config Server configuration
   * @returns ServerFile object for the README
   */
  protected generateReadme(config: ExtendedServerConfig): ServerFile {
    const { name, description, endpoints, authentication } = config;
    
    return {
      name: 'README.md',
      path: '/',
      content: `# ${name}

This is a Model Context Protocol (MCP) server generated by MCP Server Generator.

## Description

${description || 'An MCP server for integrating with large language models.'}

## Available Endpoints

${endpoints.map(endpoint => `- \`${endpoint.method} ${endpoint.path}\`: ${endpoint.description || 'No description'}`).join('\n')}

## Authentication

${authentication.type === 'None' 
  ? 'This server does not require authentication.' 
  : `This server uses ${authentication.type} authentication.`}
`,
      type: 'documentation',
      language: 'markdown'
    };
  }
  
  /**
   * Generate a .env file for the server
   * @param config Server configuration
   * @returns ServerFile object for the .env file
   */
  protected generateEnvFile(config: ExtendedServerConfig): ServerFile {
    const { authentication } = config;
    
    return {
      name: '.env',
      path: '/',
      content: `# MCP Server Configuration
PORT=3000
${authentication.type !== 'None' ? `API_KEY=${config.authSecret || 'your-api-key'}` : ''}
${config.mode === 'proxy' ? `TARGET_API_URL=${config.targetBaseUrl || 'https://api.example.com'}` : ''}
`,
      type: 'config',
      language: 'plaintext'
    };
  }
}
