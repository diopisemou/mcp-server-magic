import { ServerConfig, ServerFile } from '@/types';
import { generateReadme } from './readmeGenerator';

export const generatePythonServer = (config: ServerConfig): ServerFile[] => {
  const { name, description, authentication, endpoints } = config;

  const requirementsContent = `
fastapi==${authentication ? '0.68.1' : 'latest'}
uvicorn==${authentication ? '0.15.0' : 'latest'}
${authentication ? 'python-jose[cryptography]==3.3.0' : ''}
`;

  const mainContent = `
from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import Optional
${authentication ? 'from jose import JWTError, jwt' : ''}
${authentication ? 'from pydantic import BaseModel' : ''}

app = FastAPI()

${authentication ? `
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

security = HTTPBearer()

def get_current_user(creds: HTTPAuthorizationCredentials = Depends(security)):
    token = creds.credentials
    try:
        payload = jwt.decode(token, "${config.authSecret || 'your-secret-key'}", algorithms=["HS256"])
        username: str = payload.get("sub")
        if username is None:
            raise HTTPException(
                status_code=400, detail="Could not validate credentials"
            )
        token_data = TokenData(username=username)
    except JWTError:
        raise HTTPException(
            status_code=400, detail="Could not validate credentials"
        )
    return token_data
` : ''}

@app.get("/")
async def read_root():
    return {"message": "Welcome to the ${name || 'My API'}!"}

${endpoints.map(endpoint => {
    const params = endpoint.parameters.map(param => {
      return `${param.name}: ${param.type}${param.required ? '' : ' = None'}`;
    }).join(', ');

    const auth_dependency = authentication ? ', current_user: TokenData = Depends(get_current_user)' : '';

    return `
@app.${endpoint.method.toLowerCase()}("${endpoint.path}")
async def ${endpoint.id.replace(/[^a-zA-Z0-9_]/g, '_')}(${params}${auth_dependency}):
    """${endpoint.description}"""
    ${authentication ? 'print(f"Authenticated user: {current_user.username}")' : ''}
    return {"message": "This is a placeholder for ${endpoint.method} ${endpoint.path}"}
`;
  }).join('')}
`;

  const readmeContent = generateReadme({
    name: name || 'Python FastAPI Server',
    description: description || 'A server generated by MCP',
    language: 'Python',
    framework: 'FastAPI',
    authentication: authentication ? authentication.type : 'None',
    endpoints: endpoints
  });

  return [
    {
      path: "requirements.txt",
      content: requirementsContent,
      type: "config",
      language: "text"
    },
    {
      path: "main.py",
      content: mainContent,
      type: "code",
      language: "python"
    },
    {
      path: "README.md",
      content: readmeContent,
      type: "documentation",
      language: "markdown"
    }
  ];
};
